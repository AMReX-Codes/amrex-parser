
FINAL_VPATH_LOCATIONS = . $(VPATH_LOCATIONS)
vpath %.cpp  $(FINAL_VPATH_LOCATIONS)
vpath %.H    $(FINAL_VPATH_LOCATIONS)
vpath %.hpp  $(FINAL_VPATH_LOCATIONS)

vpath amrexpr_Config.H $(srcTempDir)

FCPPFLAGS := $(addprefix $(CPP_PREFIX), $(CPPFLAGS))

# Suppress display of executed commands.  Default verbose
SILENT =
ifeq ($(VERBOSE),OFF)
  SILENT = @
else ifeq ($(VERBOSE),FALSE)
  SILENT = @
endif

ifndef LINKFLAGS
  # $(EXTRACXXFLAGS) does not go into LINKFLAGS
  LINKFLAGS = $(CXXFLAGS)
endif

ifndef AMREXPR_LINKER
  AMREXPR_LINKER = $(CXX)
endif

CXXDEPFLAGS = $(LEGACY_DEPFLAGS) $(filter-out -dc,$(CXXFLAGS)) $(CPPFLAGS) $(includes)

ifneq ($(CCACHE),)
  ifneq ($(AMREXPR_CCACHE_ENV),)
    CCACHE_COMMAND = $(AMREXPR_CCACHE_ENV) $(CCACHE)
  else
    CCACHE_COMMAND = $(CCACHE)
  endif
endif

#
# Rules for building executable.
#

# only one executable
$(executable): $(objForExecs)
ifneq ($(SKIP_LINKING),TRUE)
	@echo Linking $@ ...
	$(SILENT) $(AMREXPR_LINKER) $(LINKFLAGS) $(CPPFLAGS) $(includes) $(LDFLAGS) -o $@ $^ $(FINAL_LIBS)
#	@echo SUCCESS
endif

$(srcTempDir)/amrexpr_Config.H:
	@echo Generating amrexpr_Config.H ...
	@if [ ! -d $(srcTempDir) ]; then mkdir -p $(srcTempDir); fi
	@ $(MKCONFIG) --defines="$(CPPFLAGS)" --undefines="" \
	              --comp="$(lowercase_comp)" \
	              --allow-different-compiler="$(ALLOW_DIFFERENT_COMP)" \
	              > $@

$(amrexprlib): $(objForExecs)
	@echo Building libamrexpr.a
	$(SILENT) $(AR) $(ARFLAGS) $@ $^
	$(SILENT) $(RANLIB) $@

install_lib:
	@echo Installing libamrexpr.a at $(amrexprLibDir) ...
	@if [ ! -d $(amrexprLibDir) ]; then mkdir -p $(amrexprLibDir); fi
	@if test -f $(amrexprlib); then \
	  install -c -m 644 $(amrexprlib) $(amrexprLibDir); \
	else \
	  echo "$(amrexprlib) does not exist!"; \
	fi

uninstall_lib:
	@echo Uninstalling libamrexpr.a and objects from $(amrexprLibDir) and $(objEXETempDir) ...
	@if test -f $(amrexprlib); then \
	  $(SILENT) $(RM) $(amrexprlib); \
	  $(SILENT) $(RM) $(objForExecs); \
	  $(SILENT) $(RM) $(amrexprLibDir)/libamrexpr.a; \
	else \
	  echo "$(amrexprlib) does not exist!"; \
	fi
	@if [ -d $(amrexprLibDir) ]; then \
	    $(SILENT) rmdir -p --ignore-fail-on-non-empty $(amrexprLibDir); \
	fi

install_headers:
	@echo Installing headers at $(amrexprIncludeDir) ...
	@if [ ! -d $(amrexprIncludeDir) ]; then mkdir -p $(amrexprIncludeDir); fi
	@for d in $(Pdirs); do \
	  for h in $(CEXE_headers); do \
	    f=Src/$$d/$$h; \
	    if test -f "$$f"; then \
	      install -c -m 644 "$$f" $(amrexprIncludeDir); \
	    fi; \
	  done; \
	done
	@install -c -m 644 $(srcTempDir)/amrexpr_Config.H $(amrexprIncludeDir)

uninstall_headers:
	@echo Uninstall headers at $(amrexprIncludeDir) ...
	@for d in $(Pdirs); do \
	  for h in $(CEXE_headers); do \
	    f=Src/$$d/$$h; \
	    if test -f "$$f"; then \
	       $(SILENT) $(RM) $(amrexprIncludeDir)/$$h; \
	    fi; \
	  done; \
	done
	@$(SILENT) $(RM) $(amrexprIncludeDir)/amrexpr_Config.H;
	@if [ -d $(amrexprIncludeDir) ]; then \
	    $(SILENT) rmdir -p --ignore-fail-on-non-empty $(amrexprIncludeDir); \
	fi;

$(objEXETempDir)/amrexpr.pc: FORCE
	@echo Generating amrexpr.pc ...
	@ $(MKPKGCONFIG) --prefix="$(abspath $(AMREXPR_INSTALL_DIR))" \
	                 --version="$(AMREXPR_GIT_VERSION)" \
	                 --cflags="$(CXXFLAGS) $(EXTRACXXFLAGS)" \
	                 --libs="$(filter-out -L.,$(LDFLAGS)) $(FINAL_LIBS)" \
	                 --libpriv="" \
                         > $@

install_pkg_config: $(objEXETempDir)/amrexpr.pc
	@echo Installing amrexpr.pc ...
	@if [ ! -d $(amrexprPkgconfigDir) ]; then mkdir -p $(amrexprPkgconfigDir); fi
	$(SILENT) install -c -m 644 $< $(amrexprPkgconfigDir)

uninstall_pkg_config:
	@echo Uninstalling amrexpr.pc ...
	@$(SILENT) $(RM) $(objEXETempDir)/amrexpr.pc
	@$(SILENT) $(RM) $(amrexprPkgconfigDir)/amrexpr.pc
	@if [ -d $(amrexprPkgconfigDir) ]; then \
	    $(SILENT) rmdir -p --ignore-fail-on-non-empty $(amrexprPkgconfigDir); \
	fi;
	@if [ -d $(amrexprLibDir) ]; then \
	    $(SILENT) rmdir -p --ignore-fail-on-non-empty $(amrexprLibDir); \
	fi;

cleanconfig::
	@echo Cleaning...
	$(SILENT) $(RM) $(objEXETempDir)/*.d
	$(SILENT) $(RM) $(srcTempDir)/* $(objEXETempDir)/*.o
	$(SILENT) $(RM) $(tmpEXETempDir)/*
	$(SILENT) $(RM) *.optrpt $(objEXETempDir)/*.optrpt
	$(SILENT) $(RM) $(executable)
	$(SILENT) $(RM) -r $(executable).dSYM

clean:: cleanconfig
	@echo Cleaning ...
	$(SILENT) $(RM) TAGS tags
	$(SILENT) $(RM) -r $(TMP_BUILD_DIR) *~
	$(SILENT) $(RM) *.ex *.o
	$(SILENT) $(RM) *.ptx

realclean:: clean

file_locations:
	$(AMREXPR_HOME)/Tools/F_scripts/find_files_vpath.py --vpath "$(FINAL_VPATH_LOCATIONS)" --files "$(CEXE_sources) $(CEXE_headers)"


tags:	$(allSources)
	@echo ctags ...
	$(SILENT) ctags --fortran-kinds=+i $(abspath $^)

TAGS:	$(allSources)
	@echo etags $< ...
	$(SILENT) etags $(abspath $^)

FORCE:

.PHONY:	all cleanconfig clean realclean file_locations tags TAGS install_lib install_headers install_fortran_modules install_pkg_config

#
# Rules for objects.
#
$(objEXETempDir)/%.o: %.cpp $(srcTempDir)/amrexpr_Config.H $(AUTO_BUILD_SOURCES)
	@echo Compiling $*.cpp ...
	@if [ ! -d $(objEXETempDir) ]; then mkdir -p $(objEXETempDir); fi
	$(SILENT) $(CCACHE_COMMAND) $(CCACHEFLAGS) $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(EXTRACXXFLAGS) $(CPPFLAGS) $(includes) $(mpicxx_include_dirs) -c $< $(EXE_OUTPUT_OPTION)

#
# Rules for dependencies in bare object files.
#

$(depEXETempDir)/%.d: %.cpp $(srcTempDir)/amrexpr_Config.H $(AUTO_BUILD_SOURCES)
	@echo Depending $< ...
	@if [ ! -d $(depEXETempDir) ]; then mkdir -p $(depEXETempDir); fi
ifeq ($(USE_SYCL),TRUE)
        # Use > $@2 to filter out unnecessary messages
	$(CXX) $(CXXDEPFLAGS) $< -o $@ > $@2
else ifeq ($(USE_HIP),TRUE)
	$(CXX) $(CXXDEPFLAGS) $< -o $@
else
	$(CXX) $(CXXDEPFLAGS) $< > $@
endif
	@$(SHELL) -ec 'sed -i -e '\''s,$*\.o,$(objEXETempDir)/& $@,g'\'' $@'

#
# Now load/build the dependency files.
# Also handle any necessary preprocessing.
#
ifneq ($(NO_CONFIG_CHECKING),TRUE)
ifneq ($(findstring print-,$(MAKECMDGOALS)),print-)
ifneq ($(MAKECMDGOALS),help)

ifdef CEXE_sources
ifeq ($(USE_LEGACY_DEPFLAGS),TRUE)
  -include $(CEXE_sources:%.cpp=$(depEXETempDir)/%.d)
else
  -include $(CEXE_sources:%.cpp=$(objEXETempDir)/%.d)
endif
endif

endif
endif
endif

ifneq ($(NO_CONFIG_CHECKING),TRUE)
ifneq ($(MAKECMDGOALS),$(filter $(MAKECMDGOALS),file_locations tags TAGS))
  ifdef has_compiler_mismatch
    $(error $(has_compiler_mismatch))
  endif
endif
endif

#-----------------------------------------------------------------------------
# for debugging.  To see the value of a Makefile variable,
# e.g. libraries, simply do "make print-libraries".  This will
# print out the value.
print-%:
	@echo $* is "$($*)"
	@echo '    origin = $(origin $*)'
	@echo '     value = $(subst ','"'"',$(value  $*))'
# We need to use subst on the result of $(value) because it contains single
# quotes.  Shell command echo does not like things like 'x'$(filiter-out)'y',
# because what it sees is 'x', $(filter-out), and 'y'.  With the substitution, it
# will see 'x', "'", '$(filter-out)', "'", and 'y', with $(filter-out) inside a
# pair of single quotes.

.PHONY: help
help:
	@echo ""
	@echo "The rule for compiling foo.cpp  is: \$$(CXX) \$$(CXXFLAGS) \$$(EXTRACXXFLAGS) \$$(CPPFLAGS) \$$(includes) -c foo.o foo.cpp"
	@echo "The rule for linking            is: \$$(CXX) \$$(LINKFLAGS) \$$(CPPFLAGS) \$$(includes) \$$(LDFLAGS) -o \$$(executable) *.o \$$(FINAL_LIBS)"
	@echo ""
	@echo "Here the variables are set to:"
	@echo "    CXX           = $(CXX)"
	@echo "    CPPFLAGS      = $(CPPFLAGS)"
	@echo "    CXXFLAGS      = $(CXXFLAGS)"
	@echo "    EXTRACXXFLAGS = $(EXTRACXXFLAGS)"
	@echo "    LINKFLAGS     = $(LINKFLAGS)"
	@echo "    includes      = $(includes)"
	@echo "    LDFLAGS       = $(LDFLAGS)"
	@echo "    FINAL_LIBS    = $(FINAL_LIBS)"
	@echo "    executable    = $(executable)"
	@echo ""
	@echo "Read Tools/GNUMake/README.md for details on tweaking the make system."
